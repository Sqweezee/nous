import time
import requests
import logging
import random
import re
from itertools import cycle

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
API_KEYS_FILE = "api_keys.txt"
QUESTIONS_FILE = "questions.txt"

# Hyperbolic API
HYPERBOLIC_API_URL = "https://inference-api.nousresearch.com/v1/chat/completions"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
MAX_TOKENS = 4096
TEMPERATURE = 0.7
TOP_P = 0.9

# –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
MIN_DELAY = 280
MAX_DELAY = 580

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
logger = logging.getLogger(__name__)

# üì¶ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
MODELS = [
    "Hermes-4-70B",
    "Hermes-4-405B",
]

# üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä –º–æ–¥–µ–ª–µ–π
model_cycle = cycle(MODELS)

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–µ–π
def load_api_keys(filename: str) -> list:
    try:
        with open(filename, "r", encoding="utf-8") as f:
            keys = [line.strip() for line in f if line.strip()]
        if not keys:
            raise ValueError("–§–∞–π–ª API-–∫–ª—é—á–µ–π –ø—É—Å—Ç.")
        return keys
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API-–∫–ª—é—á–µ–π –∏–∑ {filename}: {e}")
        return []

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
api_keys = load_api_keys(API_KEYS_FILE)

if not api_keys:
    logger.error("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã API-–∫–ª—é—á–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª api_keys.txt")
    exit(1)

# üîÑ –¶–∏–∫–ª –ø–æ API-–∫–ª—é—á–∞–º
api_cycle = cycle(enumerate(api_keys, 1))

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
def send_request(question: str, model: str) -> bool:
    api_index, api_key = next(api_cycle)

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    data = {
        "messages": [{"role": "user", "content": question}],
        "model": model,
        "max_tokens": MAX_TOKENS,
        "temperature": TEMPERATURE,
        "top_p": TOP_P
    }

    logger.info(f"‚û°Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API-–∫–ª—é—á #{api_index}, –º–æ–¥–µ–ª—å: {model}")

    try:
        response = requests.post(HYPERBOLIC_API_URL, headers=headers, json=data, timeout=30)
        response.raise_for_status()

        response_json = response.json()
        answer = response_json.get("choices", [{}])[0].get("message", {}).get("content", "")

        logger.info("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        logger.info(f"üì• –û—Ç–≤–µ—Ç: {answer.strip()}")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return False

# üìÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def main():
    try:
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            questions = [line.strip() for line in f if line.strip()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {QUESTIONS_FILE}: {e}")
        return

    if not questions:
        logger.error(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ {QUESTIONS_FILE} –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    index = 0
    while True:
        question = questions[index]
        model = next(model_cycle)

        logger.info(f"üìå –í–æ–ø—Ä–æ—Å #{index + 1}: {question}")

        send_request(question, model)

        index = (index + 1) % len(questions)

        delay = random.uniform(MIN_DELAY, MAX_DELAY)
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...")
        time.sleep(delay)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()

